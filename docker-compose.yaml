version: "3.8"

x-environment-defaults: &environment-defaults
  DEBUG: "False"
  DB_HOST: "postgres"
  DB_DATABASE: "atomic"
  DB_USERNAME: "atomic"
  DB_PASSWORD: "atomic"
  CELERY_BROKER_URL: redis://redis:6379/0
  CELERY_RESULT_BACKEND: redis://redis:6379/0

services:
  postgres:
    image: postgres:latest
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_HOST_AUTH_METHOD=md5
      - POSTGRES_PASSWORD=atomic
      - POSTGRES_USER=atomic
      - POSTGRES_DB=atomic
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U atomic -d atomic" ]
      interval: 10s
      timeout: 5s
      retries: 5


  redis:
    image: redis:latest
    restart: always
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: atomic_progress
    entrypoint:
      - /migrate
    command:
      - /start
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      <<: *environment-defaults
    env_file:
      - .env
    volumes:
      - static_volume:/app/static

  celery:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: celery
    command:
      - /start-celery-worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_started
    environment:
      <<: *environment-defaults
    env_file:
      - .env
    volumes:
      - static_volume:/app/static

  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: celery-beat
    entrypoint:
      - /migrate
    command:
      - /start-celery-beat
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_started
    environment:
      <<: *environment-defaults
    env_file:
      - .env
    volumes:
      - static_volume:/app/static

  nginx:
    image: nginx:latest
    restart: always
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - app
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/static
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:80/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  static_volume:
